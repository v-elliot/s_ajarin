/*
Copyright (c) 2011, Yubo Dong @ www.jswidget.com
All rights reserved.

Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions are met:

    * Redistributions of source code must retain the above copyright
      notice, this list of conditions and the following disclaimer.
    * Redistributions in binary form must reproduce the above copyright
      notice, this list of conditions and the following disclaimer in the
      documentation and/or other materials provided with the distribution.
    * Neither the name of the jswidget.com nor the
      names of its contributors may be used to endorse or promote products
      derived from this software without specific prior written permission.

THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" 
AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING,  BUT NOT LIMITED TO,  THE 
IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS  FOR A PARTICULAR PURPOSE 
ARE DISCLAIMED. IN  NO  EVENT  SHALL  JSWIDGET.COM BE LIABLE FOR ANY DIRECT, 
INDIRECT,   INCIDENTAL,   SPECIAL,  EXEMPLARY,  OR  CONSEQUENTIAL   DAMAGES 
(INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND 
ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR  TORT 
(INCLUDING  NEGLIGENCE  OR  OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF 
THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
*/

var COLOR_SPACE = {};
COLOR_SPACE.rgb2hsv = function () {
    var a, b, e, d, c, f, g, h;
    if (arguments.length === 1) {
        a = arguments[0].r;
        b = arguments[0].g;
        e = arguments[0].b
    } else {
        a = arguments[0];
        b = arguments[1];
        e = arguments[2]
    }
    if (a > b) {
        f = Math.max(a, e);
        g = Math.min(b, e)
    } else {
        f = Math.max(b, e);
        g = Math.min(a, e)
    }
    h = f - g;
    if (f == 0.0) {
        c = 0.0
    } else {
        c = h / f
    }
    if (c == 0.0) {
        d = 0.0
    } else {
        if (a == f) {
            d = 60.0 * (b - e) / h
        } else if (b == f) {
            d = 120 + 60.0 * (e - a) / h
        } else {
            d = 240 + 60.0 * (a - b) / h
        }
        if (d < 0.0) {
            d += 360.0
        }
        if (d > 360.0) {
            d -= 360.0
        }
    }
    d = Math.round(d);
    c = Math.round(c * 255.0);
    f = Math.round(f);
    if (d == 360) {
        d = 0
    }
    return {
        h: d,
        s: c,
        v: f
    }
};
COLOR_SPACE.hsv2rgb = function () {
    if (arguments.length === 1) {
        hue = arguments[0].h;
        saturation = arguments[0].s;
        value = arguments[0].v
    } else {
        hue = arguments[0];
        saturation = arguments[1];
        value = arguments[2]
    }
    var a, b, e, d;
    var c, f, g, h;
    var i;
    if (saturation === 0) {
        hue = value;
        saturation = value;
        value = value
    } else {
        a = hue;
        b = saturation / 255.0;
        e = value / 255.0;
        if (a == 360) {
            d = 0
        } else {
            d = a / 60
        }
        i = Math.floor(d);
        c = d - i;
        vs = e * b;
        f = value - value * b;
        switch (i) {
            case 0:
                h = e - vs * (1 - c);
                hue = Math.round(value);
                saturation = Math.round(h * 255.0);
                value = Math.round(f);
                break;
            case 1:
                g = e - vs * c;
                hue = Math.round(g * 255.0);
                saturation = Math.round(value);
                value = Math.round(f);
                break;
            case 2:
                h = e - vs * (1 - c);
                hue = Math.round(f);
                saturation = Math.round(value);
                value = Math.round(h * 255.0);
                break;
            case 3:
                g = e - vs * c;
                hue = Math.round(f);
                saturation = Math.round(g * 255.0);
                value = Math.round(value);
                break;
            case 4:
                h = e - vs * (1 - c);
                hue = Math.round(h * 255.0);
                saturation = Math.round(f);
                value = Math.round(value);
                break;
            case 5:
                g = e - vs * c;
                hue = Math.round(value);
                saturation = Math.round(f);
                value = Math.round(g * 255.0);
                break
        }
    }
    return {
        r: hue,
        g: saturation,
        b: value
    }
};
COLOR_SPACE.RGB2HEX = function (b) {
    function e(a) {
        a = parseInt(a).toString(16);
        return a.length < 2 ? "0" + a : a
    }
    return ("#" + e(b.r) + e(b.g) + e(b.b)).toUpperCase()
};
COLOR_SPACE.parseColor = function (a) {
    var b = typeof (a);
    if (b == "string") {
        if (/^\#?[0-9A-F]{6}$/i.test(a)) {
            return {
                r: eval('0x' + a.substr(a.length == 6 ? 0 : 1, 2)),
                g: eval('0x' + a.substr(a.length == 6 ? 2 : 3, 2)),
                b: eval('0x' + a.substr(a.length == 6 ? 4 : 5, 2)),
                a: 255
            }
        }
    } else if (b == "object") {
        if (a.hasOwnProperty("r") && a.hasOwnProperty("g") && a.hasOwnProperty("b")) {
            return a
        }
    }
    return null
};

function ColorCanvas(a, b) {
    this.newImage = true;
    this.maxX = 255;
    this.maxY = 255;
    this.selX = 128;
    this.selY = 128;
    this.selZ = 1.0;
    this.hueBar = b;
    this.image = a;
    this.ImageData = null;
    this.paint()
}
ColorCanvas.prototype.paint = function () {
    var a = this.image.width,
        b = this.image.height;
    if (a == 0 || b == 0) {
        return
    }
    var e = Math.round((this.selX * a) / this.maxX);
    var d = Math.round((this.selY * b) / this.maxY);
    if (this.newImage || !this.image) {
        this.makeImage(this.selZ, a, b)
    }
    var c = this.image.getContext("2d");
    c.putImageData(this.ImageData, 0, 0);
    var f = this.getColor();
    var g = f.r * 0.3 + f.g * 0.59 + f.b * 0.114;
    if (this.drawPointer) {
        this.drawPointer(c, a, b, e, d, g)
    } else {
        this.drawDefaultPointer(c, a, b, e, d, g)
    }
};
ColorCanvas.prototype.drawDefaultPointer = function (a, b, e, d, c, f, g) {
    a.beginPath();
    a.lineWidth = 1;
    if (f < 128) {
        a.strokeStyle = "rgb(255,255,255)"
    } else {
        a.strokeStyle = "rgb(0,0,0)"
    }
    var h = 6;
    a.arc(d + 0.5, c + 0.5, h, 0, Math.PI * 2, true);
    h += 2;
    a.moveTo(d - h + 0.5, c + 0.5);
    a.lineTo(d + h + 0.5, c + 0.5);
    a.moveTo(d + 0.5, c - h + 0.5);
    a.lineTo(d + 0.5, c + h + 0.5);
    a.stroke()
};
ColorCanvas.prototype.makeImage = function (a, b, e) {
    if (!this.image) {
        this.image = document.createElement("canvas");
        this.image.width = b;
        this.image.height = e
    }
    var d;
    if (this.hueBar) {
        d = this._5(a, b, e)
    } else {
        d = this._6(a, b, e)
    }
    this.newImage = false;
    this.image.getContext("2d").putImageData(d, 0, 0);
    this.ImageData = d
};
ColorCanvas.prototype._6 = function (a, b, e) {
    var d = this.image.getContext("2d").getImageData(0, 0, b, e);
    var c = 0;
    var f = 0.0;
    var g = 0.0;
    var h = 0.0;
    f = (a - Math.floor(a)) * 360;
    var i, j;
    for (j = 0; j < e; j++) {
        h = 1 - j / e;
        for (i = 0; i < b; i++) {
            g = i / b;
            var k = COLOR_SPACE.hsv2rgb(f, g * 255, h * 255);
            d.data[c++] = k.r;
            d.data[c++] = k.g;
            d.data[c++] = k.b;
            d.data[c++] = 255
        }
    }
    return d
};
ColorCanvas.prototype._5 = function (a, b, e) {
    var d = this.image.getContext("2d").getImageData(0, 0, b, e);
    var c = 0;
    var f = 0.0;
    var g = 1.0;
    var h = 0.0;
    var i, j;
    for (j = e - 1; j >= 0; j--) {
        f = j / e;
        f = (f - Math.floor(f)) * 360;
        for (i = 0; i < b; i++) {
            h = 1 - i / b;
            var k = COLOR_SPACE.hsv2rgb(f, g * 255, h * 255);
            d.data[c++] = k.r;
            d.data[c++] = k.g;
            d.data[c++] = k.b;
            d.data[c++] = 255
        }
    }
    return d
};
ColorCanvas.prototype.setXY = function (a, b) {
    this.selX = a;
    this.selY = b;
    this.paint()
};
ColorCanvas.prototype.setColor = function (a) {
    var b = COLOR_SPACE.rgb2hsv(a.r, a.g, a.b);
    if (this.hueBar) {
        this.selZ = b.s / 255;
        this.setXY(255 - b.v, 255 - (b.h / 360) * 255)
    } else {
        this.selZ = b.h / 360;
        this.setXY(b.s, 255 - b.v)
    }
    this.repaint()
};
ColorCanvas.prototype.getColor = function () {
    var a = (this.hueBar) ? 1 - this.selY / 255 : this.selZ;
    var b = (this.hueBar) ? 255 : this.selX;
    var e = (this.hueBar) ? this.selX : this.selY;
    a = (a - Math.floor(a)) * 360;
    return COLOR_SPACE.hsv2rgb(a, b, 255 - e)
};
ColorCanvas.prototype.repaint = function () {
    this.newImage = true;
    this.paint()
};

function ColorPicker() {
    this.currentColor = {
        r: 0,
        g: 0,
        b: 0
    }
}
ColorPicker.prototype.init = function (e, d, c, f, g, h, i) {
    this.onColorChange = (c) ? c : function () {};
    this.onOK = (f) ? f : function () {
        return true
    };
    this.onCancel = (g) ? g : function () {
        return true
    };
    this.flat = (typeof d === "boolean") ? d : true;
    if (this.flat) {
        this._1(e)
    } else {
        this.linkedElement = e;
        this._1()
    }
    this.element.find("canvas").each(function () {
        var a = $(this).parent().width(),
            b = $(this).parent().height();
        $(this).attr("width", a);
        $(this).attr("height", b)
    });
    this.canvasMap = this.element.find(".color-map canvas")[0];
    this.canvasBar = this.element.find(".color-bar canvas")[0];
    this.colorMap = new ColorCanvas(this.canvasMap, false);
    this.colorBar = new ColorCanvas(this.canvasBar, true);
    if (h) {
        this.colorMap.drawPointer = h
    }
    if (i) {
        this.colorBar.drawPointer = i
    }
    $(this.canvasMap).data("ME", this.colorMap).data("YOU", this.colorBar);
    $(this.canvasBar).data("YOU", this.colorMap).data("ME", this.colorBar);
    this._7();
    this.setColor({
        r: 64,
        g: 128,
        b: 128
    });
    if (this._0()) {
        var j = $(this.linkedElement).val();
        if (j.length === 7 && j.charAt(0) === "#") {
            this.currentColor = COLOR_SPACE.parseColor(j);
            if (!this.currentColor) {
                this.currentColor = {
                    r: 64,
                    g: 128,
                    b: 128
                }
            }
        }
    }
    return this
};
ColorPicker.prototype._0 = function () {
    return (this.linkedElement && this.linkedElement.nodeName.toLowerCase() === "input" && $(this.linkedElement).attr("type") === "text")
};
ColorPicker.prototype.CLAMP = function (a, b, e) {
    b = b || 0;
    e = e || 255;
    if (a < b) {
        a = b
    }
    if (a > e) {
        a = e
    }
    return Math.round(a)
};
ColorPicker.prototype._2 = function () {
    var a = this.initialColor;
    if (this._0()) {
        $(this.linkedElement).val(COLOR_SPACE.RGB2HEX(a))
    } else {
        $(this.linkedElement).css("background-color", "rgb(" + a.r + "," + a.g + "," + a.b + ")")
    }
    this.colorChanged(a)
};
ColorPicker.prototype._7 = function () {
    var c = this;
    this.mouseStarted = false;
    if (this._0()) {
        $(this.linkedElement).bind("focus", function (a) {
            c.show()
        })
    } else {
        $(this.linkedElement).bind("mousedown", function (a) {
            c.show()
        })
    }
    this.element.find(".old-color").click(function () {
        c._2()
    });
    $(this.canvasBar).add(this.canvasMap).bind("mousedown", function (a) {
        c.mouseStarted = true;
        var b = $(this).offset();
        var e = a.pageX - b.left,
            d = a.pageY - b.top;
        c._3(e, d, this)
    }).bind("mouseup", function (a) {
        c.mouseStarted = false
    }).bind("mouseout", function (a) {
        c.mouseStarted = false
    }).bind("mousemove", function (a) {
        if (c.mouseStarted) {
            var b = $(this).offset();
            var e = a.pageX - b.left,
                d = a.pageY - b.top;
            c._3(e, d, this)
        }
    });
    this.element.find("input[name=R],input[name=G],input[name=B]").bind("keyup", function () {
        var a = $(this).val();
        if (!isNaN(parseFloat(a)) && isFinite(a)) {
            a = c.CLAMP(a, 0, 255);
            switch (this.name) {
                case "R":
                    c.currentColor.r = a;
                    break;
                case "G":
                    c.currentColor.g = a;
                    break;
                case "B":
                    c.currentColor.b = a;
                    break
            }
            c.setColor(c.currentColor)
        } else {
            c.setColor(c.currentColor);
            return false
        }
    });
    this.element.find("input[name=H],input[name=S],input[name=V]").bind("keyup", function () {
        var a = $(this).val();
        if (!isNaN(parseFloat(a)) && isFinite(a)) {
            var b = COLOR_SPACE.rgb2hsv(c.currentColor);
            a = parseFloat(a);
            switch (this.name) {
                case "H":
                    a = c.CLAMP(a, 0, 359);
                    b.h = a;
                    break;
                case "S":
                    a = c.CLAMP(a, 0, 100);
                    b.s = (a * 255 / 100);
                    break;
                case "V":
                    a = c.CLAMP(a, 0, 100);
                    b.v = (a * 255 / 100);
                    break
            }
            c.currentColor = COLOR_SPACE.hsv2rgb(b);
            c.setColor(c.currentColor)
        } else {
            c.setColor(c.currentColor)
        }
    });
    this.element.find("input[name=RGB]").bind("change", function () {
        var a = COLOR_SPACE.parseColor($(this).val());
        if (a) {
            c.setColor(a);
            c.colorChanged(a)
        }
    }).focus(function () {
        $(this).select()
    });
    this.element.find("button[name=ok]").click(function () {
        if (c.onOK) {
            if (c.onOK(c.currentColor, COLOR_SPACE.rgb2hsv(c.currentColor))) {
                c.hide()
            }
        } else {
            c.hide()
        }
    });
    this.element.find("button[name=cancel]").click(function () {
        c._2();
        if (c.onCancel) {
            if (c.onCancel(c.initialColor, COLOR_SPACE.rgb2hsv(c.initialColor))) {
                c.hide()
            }
        } else {
            c.hide()
        }
    })
};
ColorPicker.prototype.setInitialColor = function (a) {
    this.initialColor = a;
    this.element.find(".old-color").css("backgroundColor", COLOR_SPACE.RGB2HEX(a));
    return this.setColor(a)
};
ColorPicker.prototype.setColor = function (a) {
    this.currentColor = a;
    this.setColorText(this.currentColor);
    this.colorMap.setColor(this.currentColor);
    this.colorBar.setColor(this.currentColor);
    return this
};
ColorPicker.prototype._3 = function (a, b, e) {
    var d = this.CLAMP((a * 255) / e.width, 0, 255);
    var c = this.CLAMP((b * 255) / e.height, 0, 255);
    $(e).data("ME").setXY(d, c);
    var f = $(e).data("ME").getColor();
    $(e).data("YOU").setColor(f);
    if (f) {
        this.colorChanged(f)
    }
};
ColorPicker.prototype.colorChanged = function (a) {
    this.currentColor = a;
    this.setColorText(a);
    if (this._0()) {
        $(this.linkedElement).val(COLOR_SPACE.RGB2HEX(a))
    } else {
        $(this.linkedElement).css("background-color", "rgb(" + a.r + "," + a.g + "," + a.b + ")")
    }
    if (this.onColorChange) {
        this.onColorChange(a, COLOR_SPACE.rgb2hsv(a))
    }
};
ColorPicker.prototype.setColorText = function (a) {
    this.element.find("input[name=RGB]").val(COLOR_SPACE.RGB2HEX(a));
    this.element.find("input[name=R]").val(a.r);
    this.element.find("input[name=G]").val(a.g);
    this.element.find("input[name=B]").val(a.b);
    var b = COLOR_SPACE.rgb2hsv(a);
    b.s = (b.s / 255 * 100).toFixed(0);
    b.v = (b.v / 255 * 100).toFixed(0);
    this.element.find("input[name=H]").val(b.h);
    this.element.find("input[name=S]").val(b.s);
    this.element.find("input[name=V]").val(b.v);
    this.element.find(".preview .cur-color").css("background-color", "rgb(" + a.r + "," + a.g + "," + a.b + ")");
    $(this.linkedElement).data("current_color", a)
};
ColorPicker.prototype.getColor = function () {
    return this.currentColor
};
ColorPicker.prototype.show = function () {
    if (this.element.css("visibility") === "hidden") {
        var a = $(this.linkedElement).offset();
        var b = a.left,
            e = a.top + $(this.linkedElement).outerHeight();
        if (b + this.element.width() > $(window).width() + $("body").scrollLeft()) {
            b = $(window).width() + $("body").scrollLeft() - this.element.width() - 10
        }
        if (e + this.element.height() > $(window).height() + $(window).scrollTop()) {
            e = a.top - this.element.height() - 10
        }
        this._4.css("display", "");
        this.element.css({
            "visibility": "visible",
            "left": b + "px",
            "top": e + "px"
        }).animate({
            opacity: 1
        }, 300);
        var d = $(this.linkedElement).data("current_color");
        if (this.linkedElement.nodeName.toLowerCase() === "input" && $(this.linkedElement).attr("type") === "text") {
            var c = $(this.linkedElement).val();
            if (c.length === 7 && c.charAt(0) === "#") {
                d = COLOR_SPACE.parseColor(c)
            }
        }
        if (d) {
            this.setInitialColor(d)
        }
    }
    return this
};
ColorPicker.prototype.hide = function () {
    if (this.element.css("visibility") !== "hidden") {
        this._4.css("display", "none");
        this.element.animate({
            opacity: 0
        }, 300, function () {
            $(this).css("visibility", "hidden")
        })
    }
    return this
};
ColorPicker.prototype._1 = function (a) {
    var b = Math.round(Math.random() * 1000000 * (new Date()));
    var e = this,
        d = {
            position: "absolute",
            left: "0px",
            top: "0px",
            visibility: "hidden",
            zIndex: 10001
        };
    var c = $("body");
    var f = " popup";
    if (a) {
        c = $(a);
        var g = c.width(),
            h = c.height();
        if (c.css("position") == "relative" || c.css("position") == "absolute") {
            d = {
                position: "absolute",
                left: "0px",
                top: "0px",
                visibility: "visible",
                width: g + "px",
                height: h + "px"
            }
        } else {
            c.css("position", "relative");
            d = {
                position: "absolute",
                left: "0px",
                top: "0px",
                visibility: "visible",
                width: g + "px",
                height: h + "px"
            }
        }
        f = ""
    } else {
        c.append($("<div></div>").attr("id", "cp-mask-" + b).css({
            position: "absolute",
            left: "0px",
            top: "0px",
            width: $(document).width() + "px",
            height: $(document).height() + "px",
            zIndex: 10000,
            opacity: 0.01,
            display: "none"
        }).each(function () {
            e._4 = $(this)
        }).bind("mousedown", function () {
            e.hide()
        }))
    }
    c.append($('<div class="canvas-color-picker' + f + '"></div>').attr("id", "cp-" + b).css(d).append('<div class="color-map"><canvas name="colormap"></canvas></div>').append('<div class="color-bar"><canvas name="huebar"></canvas></div>').append('<div class="preview"><div class="cur-color"></div><div class="old-color"></div></div>').append($('<div class="form"></div>').append($('<div class="rgb"></div>').append('<label>R:</label><input type="text" name="R" size="3" maxlength="3"/><br />').append('<label>G:</label><input type="text" name="G" size="3" maxlength="3" /><br />').append('<label>B:</label><input type="text" name="B" size="3" maxlength="3" />')).append($('<div class="hsb"></div>').append('<label>H:</label><input type="text" name="H" size="3" maxlength="3"/><label>&deg;</label><br />').append('<label>S:</label><input type="text" name="S" size="3" maxlength="3"/><label>%</label><br />').append('<label>B:</label><input type="text" name="V" size="3" maxlength="3"/><label>%</label>')).append($('<div class="color"></div>').append('<label>#:</label><input type="text" name="RGB" size="7" maxlength="7"/>'))).append('<div class="buttons"><button name="ok">OK</button><button name="cancel">Cancel</button></div><br />').each(function () {
        e.element = $(this)
    }))
};
ColorPicker.prototype.showRGB = function (a) {
    var b = this.element.find(".form .rgb");
    if (a) {
        b.show()
    } else {
        b.hide()
    }
    return this
};
ColorPicker.prototype.showHSB = function (a) {
    var b = this.element.find(".form .hsb");
    if (a) {
        b.show()
    } else {
        b.hide()
    }
    return this
};
ColorPicker.prototype.showColor = function (a) {
    var b = this.element.find(".form .color");
    if (a) {
        b.show()
    } else {
        b.hide()
    }
    return this
};
ColorPicker.prototype.showButtons = function (a) {
    var b = this.element.find(".buttons");
    if (a) {
        b.show()
    } else {
        b.hide()
    }
    return this
};
ColorPicker.prototype.showPreview = function (a) {
    var b = this.element.find(".preview");
    if (a) {
        b.show()
    } else {
        b.hide()
    }
    return this
};
ColorPicker.prototype.sizeTo = function (a, b) {
    if (a < 60) {
        a = 60
    }
    if (b < 30) {
        b = 30
    }
    this.element.width(a).height(b);
    if (b < 150) {
        this.showRGB(false).showHSB(false).showButtons(false)
    }
    if (b < 100) {
        this.showPreview(false).showColor(false)
    }
    if (a < 200) {
        this.showRGB(false).showHSB(false).showPreview(false).showColor(false).showButtons(false)
    }
    this._8();
    return this
};
ColorPicker.prototype._8 = function () {
    var a = this.element.width(),
        b = this.element.height();
    if (b < 200) {
        this.showRGB(false);
        this.showHSB(false)
    }
    this.element.find("canvas[name=colormap]").attr({
        "width": this.element.find(".color-map").width(),
        "height": this.element.find(".color-map").height()
    });
    this.element.find("canvas[name=huebar]").attr("height", this.element.find(".color-bar").height());
    var e = this.element.find(".form .rgb");
    var d = this.element.find(".form .hsb");
    var c = this.element.find(".form .color");
    var f = this.element.find(".buttons");
    var g = this.element.find(".preview");
    if (e.css("display") === "none" && d.css("display") === "none" && c.css("display") === "none" && f.css("display") === "none" && g.css("display") === "none") {
        this.element.find(".color-map").css("right", "30px");
        this.element.find(".color-bar").css("right", "5px");
        this.element.find("canvas[name=colormap]").attr({
            "width": this.element.find(".color-map").width(),
            "height": this.element.find(".color-map").height()
        })
    }
    if (e.css("display") === "none" && d.css("display") === "none" && c.css("display") === "none") {
        this.element.find(".form").hide()
    } else {
        this.element.find(".form").show()
    }
    if (e.css("display") === "none" && d.css("display") === "none") {
        this.element.find(".buttons").css("height", "50px");
        this.element.find(".buttons button").css("width", "110px")
    } else {
        this.element.find(".buttons").css("height", "25px");
        this.element.find(".buttons button").css("width", "55px")
    }
    this.colorMap.repaint();
    this.colorBar.repaint()
};
(function (g) {
    g.fn.CanvasColorPicker = function (e) {
        f();
        var d = {
            flat: false,
            width: 400,
            height: 260,
            showColor: true,
            showRGB: true,
            showHSB: true,
            showButtons: true,
            showPreview: true,
            color: {
                r: 0,
                g: 0,
                b: 0
            },
            onColorChange: function (a, b) {},
            onOK: function (a, b) {
                return true
            },
            onCancel: function (a, b) {
                return true
            },
            drawColorMapPointer: null,
            drawHueMapPointer: null
        };
        return this.each(function () {
            if (e) {
                g.extend(d, e);
                d.color = c(d.color)
            }
            var a = new ColorPicker().init(this, d.flat, d.onColorChange, d.onOK, d.onCancel, d.drawColorMapPointer, d.drawHueMapPointer).setInitialColor(d.color).showRGB(d.showRGB).showHSB(d.showHSB).showColor(d.showColor).showButtons(d.showButtons).showPreview(d.showPreview);
            if (d.flat) {
                a.sizeTo(g(this).width(), g(this).height())
            } else {
                a.sizeTo(d.width, d.height)
            }
        });

        function c(a) {
            if (typeof (a) === "object" && a.hasOwnProperty("r") && a.hasOwnProperty("g") && a.hasOwnProperty("b")) {
                a.r = (a.r < 0) ? 0 : ((a.r > 255) ? 255 : a.r);
                a.g = (a.g < 0) ? 0 : ((a.g > 255) ? 255 : a.g);
                a.b = (a.b < 0) ? 0 : ((a.b > 255) ? 255 : a.b)
            } else {
                a = {
                    r: 0,
                    g: 0,
                    b: 0
                }
            }
            return a
        }
        function f() {
            if (g.fn.CanvasColorPicker.StyleReady) {
                return
            }
            g.fn.CanvasColorPicker.StyleReady = true;
            var a = ["<style type='text/css'>", ".canvas-color-picker{position:relative;width:400px;height:260px;background:transparent;}", ".canvas-color-picker.popup{background: -webkit-gradient(linear, 0 0, 0 bottom, from(#efefef), to(#dddddd));background: -moz-linear-gradient(#efefef, #dddddd);background: linear-gradient(#efefef, #dddddd);filter:progid:DXImageTransform.Microsoft.Gradient(GradientType=0, startColorstr=#efefef,endColorstr=#dddddd);box-shadow:3px 2px 5px #888888;-moz-box-shadow: 3px 2px 10px #888888;-webkit-box-shadow: 3px 2px 5px #888888; border:1px solid #eeeeee;}", ".canvas-color-picker .color-map{position:absolute;left:5px;top:5px;bottom:5px;right:145px;}", ".canvas-color-picker .color-bar{position:absolute;width:20px;right:120px;top:5px;bottom:5px;}.canvas-color-picker .preview{position:absolute;top:5px;right:5px;width:110px;height:60px;border:1px solid black;border-right:1px solid white;border-bottom:1px solid white;}", ".canvas-color-picker .preview .cur-color,.canvas-color-picker .preview .old-color{position:relative;height:30px;width:110px;background:blue;}", ".canvas-color-picker .preview .old-color{background:green;}", ".canvas-color-picker .form{position:absolute;padding:0px;margin:0px;top:70px;right:5px;width:110px;height:92px;text-align:left;}", ".canvas-color-picker .form br{clear:both;}", ".canvas-color-picker .form .rgb,.canvas-color-picker .form .hsb{position:relative;left:0px;top:0px;width:50px;height:70px;float:left;}", ".canvas-color-picker .form .hsb{width:60px;}", ".canvas-color-picker .form .color{position:relative;width:100px;height:20px;clear:both;}", ".canvas-color-picker .form label{font:11px arial;width:15px;height:22px;display:block;float:left;line-height:20px;}", ".canvas-color-picker .form input{font:11px arial;width:24px;display:block;float:left;}", ".canvas-color-picker .form .color input{width:55px;}", ".canvas-color-picker .buttons{position:absolute;bottom:5px;right:5px;width:110px;height:25px;}", ".canvas-color-picker .buttons button{position:relative;font:bold 12px arial;width:55px;height:25px;line-height:1px;padding:0px;}", "</style>"];
            g(a.join("")).appendTo("head")
        }
    }
})(jQuery);
